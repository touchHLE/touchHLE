{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7760a00a_1971a0f6",
        "filename": "src/objc/methods.rs",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1021821
      },
      "writtenOn": "2024-03-31T21:38:57Z",
      "side": 1,
      "message": "does this comment still make sense?",
      "revId": "c0037cac433ac87003bf774da89707f6e0cdab29",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25a087cc_c9f408c1",
        "filename": "src/objc/methods.rs",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1021822
      },
      "writtenOn": "2024-03-31T22:11:39Z",
      "side": 1,
      "message": "In a way, it does. It explains why the pointer to the string can\u0027t be used, and instead the value must be copied and compared to.",
      "parentUuid": "7760a00a_1971a0f6",
      "revId": "c0037cac433ac87003bf774da89707f6e0cdab29",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f4b9b25_b151fae1",
        "filename": "src/objc/methods.rs",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1021821
      },
      "writtenOn": "2024-03-31T22:20:27Z",
      "side": 1,
      "message": "In which cases you would have duplication here?\n\nThis comment make sense for selectors (for register_bin_selector()) as their definition is global to objc runtime, but instance variables are defined per class.",
      "parentUuid": "25a087cc_c9f408c1",
      "revId": "c0037cac433ac87003bf774da89707f6e0cdab29",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d767bd8e_ccd0560e",
        "filename": "src/objc/methods.rs",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1021822
      },
      "writtenOn": "2024-03-31T22:25:40Z",
      "side": 1,
      "message": "Loading nib files, the ivar name string would be a different pointer than the pointer with the ivar name in the class definition. Would that not be duplication?",
      "parentUuid": "7f4b9b25_b151fae1",
      "revId": "c0037cac433ac87003bf774da89707f6e0cdab29",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b56aa9a_09346305",
        "filename": "src/objc/methods.rs",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1021821
      },
      "writtenOn": "2024-03-31T22:48:28Z",
      "side": 1,
      "message": "I\u0027m not sure what you mean here. Instance variable can be looked by string name in the class. You could implement that lookup with Rust strings or with C strings.\n\n(Actually, objc runtime have lookup method https://developer.apple.com/documentation/objectivec/1418643-class_getinstancevariable?language\u003dobjc which takes a class and a C string. Whatever pointer you pass as name, only value of string does matter.)",
      "parentUuid": "d767bd8e_ccd0560e",
      "revId": "c0037cac433ac87003bf774da89707f6e0cdab29",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0e56da4_dad82943",
        "filename": "src/objc/methods.rs",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1021821
      },
      "writtenOn": "2024-03-31T22:49:44Z",
      "side": 1,
      "message": "I suggest to just remove those comments here, they are not making much sense for ivar names.",
      "parentUuid": "4b56aa9a_09346305",
      "revId": "c0037cac433ac87003bf774da89707f6e0cdab29",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6691f7da_daa2ce86",
        "filename": "src/objc/methods.rs",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1021822
      },
      "writtenOn": "2024-03-31T22:55:46Z",
      "side": 1,
      "message": "My point was that since you couldn\u0027t guarantee the ivar name would always be stored in the same pointer, you\u0027d have to compare the string, and not just if the pointer was the same. If duplication implies something else I\u0027m missing or if the comment is confusing or misleading, i\u0027ll just remove it.",
      "parentUuid": "b0e56da4_dad82943",
      "revId": "c0037cac433ac87003bf774da89707f6e0cdab29",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4560e7c_61f95aab",
        "filename": "src/objc/methods.rs",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1021821
      },
      "writtenOn": "2024-03-31T23:07:49Z",
      "side": 1,
      "message": "The pointer value is unrelated here as you should compare values of strings for ivar\u0027s name (think strcmp()). Deduplication doesn\u0027t make sense as you\u0027re not storing ivar\u0027s name globally.\n\nThe deduplication for selectors make sense because their definition is global and shared in the objc runtime. (check `selectors` of ObjC struct) Thus is perfectly normal to have 2 (or more) different classes responding to the same selector.",
      "parentUuid": "6691f7da_daa2ce86",
      "revId": "c0037cac433ac87003bf774da89707f6e0cdab29",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4138c268_c0394cc4",
        "filename": "src/objc/methods.rs",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1021822
      },
      "writtenOn": "2024-04-01T11:42:36Z",
      "side": 1,
      "message": "Understood",
      "parentUuid": "f4560e7c_61f95aab",
      "revId": "c0037cac433ac87003bf774da89707f6e0cdab29",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3b74b12_06a36391",
        "filename": "src/objc/methods.rs",
        "patchSetId": 5
      },
      "lineNbr": 276,
      "author": {
        "id": 1021821
      },
      "writtenOn": "2024-03-31T21:38:57Z",
      "side": 1,
      "message": "please remove this part of the comment",
      "range": {
        "startLine": 275,
        "startChar": 70,
        "endLine": 276,
        "endChar": 64
      },
      "revId": "c0037cac433ac87003bf774da89707f6e0cdab29",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72496626_8d252fdf",
        "filename": "src/objc/methods.rs",
        "patchSetId": 5
      },
      "lineNbr": 276,
      "author": {
        "id": 1021822
      },
      "writtenOn": "2024-03-31T22:11:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3b74b12_06a36391",
      "range": {
        "startLine": 275,
        "startChar": 70,
        "endLine": 276,
        "endChar": 64
      },
      "revId": "c0037cac433ac87003bf774da89707f6e0cdab29",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}