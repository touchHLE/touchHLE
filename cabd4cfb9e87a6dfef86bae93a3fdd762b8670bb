{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6e1851f7_ca9dc00d",
        "filename": "src/objc/messages.rs",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 1021821
      },
      "writtenOn": "2024-03-23T18:10:10Z",
      "side": 1,
      "message": "You should not do that! It\u0027s a bad idea to mix generic message send and ivar access via key-value coding. (e.g. if a getter message send to an object match against ivar selector, you\u0027ll override ivar with a object itself!)\n\nYou should move this code to NSKeyValue implementation (next patchset)",
      "revId": "cabd4cfb9e87a6dfef86bae93a3fdd762b8670bb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d0cde1f_d6a910b1",
        "filename": "src/objc/messages.rs",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 1021822
      },
      "writtenOn": "2024-03-28T20:42:21Z",
      "side": 1,
      "message": "I\u0027m not sure I follow, if I move this to NSKeyValue, and the app code does [obj ivar], should the emulator then call valueForKey: or setValue:forKey: underneath? I was under the impression it should be the opposite way",
      "parentUuid": "6e1851f7_ca9dc00d",
      "revId": "cabd4cfb9e87a6dfef86bae93a3fdd762b8670bb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum vote from a non-uploader is required for the \t              \u0027Code-Review\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cabd4cfb9e87a6dfef86bae93a3fdd762b8670bb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Someone must have done basic testing of the patch, and \t              it can\u0027t have failed for anyone."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=MAX","label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cabd4cfb9e87a6dfef86bae93a3fdd762b8670bb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}